input:
  resource: "test_enter_input"

buffer:
  system_window: 
    timestamp_mapping: this.timestamp
    size: 9s
    slide: 3s

pipeline:
  processors:
    - group_by_value: 
        value: ${!json("data.id")}
      
    - branch:
        request_map: root = this
        processors:
          - cache:
              resource: enter_cache
              operator: set
              key: ${!json("data.id")}
              value: ${!json().from_all().sort_by(ev -> ev.timestamp).map_each(ev -> ev.data)}
    
#     - for_each:
#         - branch:
#             request_map: root = this.data.zone_in
#             processors:
#               - cache: 
#                   resource: employee_changed_zone_cache
#                   operator: get
#                   key: this
#             result_map: root.enter.in = this

#         - branch:
#             request_map: root = this.data.zone_out
#             processors:
#               - cache: 
#                   resource: employee_changed_zone_cache
#                   operator: get
#                   key: this
#             result_map: root.enter.out = this

#     - label: enter_filter_zones_in_out
#       mapping: |
#         root = this

#         let ins = this.event.in.filter(data -> data.next.zone == this.data.zone_out)
#         let outs = this.event.out.filter(data -> data.next.zone == this.data.zone_in)

#         root.enters = $ins.append($outs)
# # root.enter.in = this.event.in.filter(data -> data.next.zone == this.data.zone_out)
# # root.enter.out = this.event.out.filter(data -> data.next.zone == this.data.zone_in)

#     - label: enter_filter_distations
#       mapping: |
#         import ../maps/distation.blobl

#         root = this

#         root.enters = this.enters.filter(
#           data -> {
#             "loc1": data.location,
#             "loc2": this.data.location
#           }.apply("distation_square") <= 1 
#           || {
#             "loc1": data.next.location,
#             "loc2": this.data.location
#           }.apply("distation_square") <= 1

#     - label:


# - for_each:
#     - branch:
#         request_map: root.id = this.pass_id
#         processors:
#           - cache:
#               resource: pass_cache
#               operator: get
#               key: ${!json("id")}
#         result_map: root.pass = this | deleted()

    - mapping: root = deleted()


              
output:
  resource: "test_output"