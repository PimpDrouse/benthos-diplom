input_resources:
  - label: "test_card_input"
    kafka:
      addresses:
        - '${KAFKA_HOST}'
      topics:
        - test-card
      consumer_group: test_cons_grp

cache_resources:
  - label: card_cache
    memory:
      compaction_interval: 20s
      default_ttl: 60s

processor_resources:
########################################## card_employee_enrichment_and_save ###########################################
  - label: card_employee_enrichment_and_save
    for_each:
      - branch:
          request_map: |
            root = {
              "key": this.data.id,
              "value": json().from_all().filter(data -> data.id == this.data.id).sort_by(ev -> ev.timestamp).map_each(ev -> ev.data)
            }
          processors:
            - cache:
                resource: card_cache
                operator: set
                key: ${!this.key}
                value: ${!this.value}

      - branch:
          request_map: root = this.data.owner_id
          processors:
            - cache:
                resource: employee_cache
                operator: get
                key: ${!this}
          result_map:
            root.data.owner_events = this

########################################## card_lost_event ###########################################
  - label: card_lost_event
    branch:
      request_map: |
        import "/maps/distation.blobl"
        let limit = @card_lost_limit * @card_lost_limit

        let distation =  this.data.owner_events.map_each(event -> {
            "employee": event.id,
            "location": event.location,
            "distation": {
              "loc1": this.data.location,
              "loc2": event.location
            }.apply("distation_square")
          }).filter(ev -> ev.distation > $limit).sort_by(ev -> ev.distation)

        if $distation.length() <= 0 {
          root = deleted()
        } else {
          root = this
          root.distation = $distation.index(-1)
        }
      processors:
        - mapping: |
            root.timestamp = this.timestamp
            root.data.card = {
              "id": this.data.id,
              "location": this.data.location,
            }
            root.data.employee = {
              "id": this.distation.employee,
              "location": this.distation.location,
            }
            root.data.distation = this.distation.distation

      result_map: |
        root.type = "card_lost_event"
        root.timestamp = this.timestamp
        root.data = this.data