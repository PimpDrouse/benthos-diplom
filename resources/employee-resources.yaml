input_resources:
  - label: "test_employee_input"
    kafka:
      addresses:
        - '${KAFKA_HOST}'
      topics:
        - test-employee
      consumer_group: test_cons_grp

cache_resources:
  - label: employee_cache
    memory:
      compaction_interval: 20s
      default_ttl: 60s
  - label: employee_changed_zone_cache
    memory:
      compaction_interval: 20s
      default_ttl: 60s

processor_resources:

########################################## employee_zone_enrichment_and_save ###########################################
  - label: employee_zone_enrichment_and_save
    for_each:
      - branch:
          request_map: |
              root = this
          processors:
            - sql_select:
                driver: postgres
                dsn: ${POSTGRES_DSN}
                table: zones
                columns:
                    - id
                    - name
                    - level
                    - time_limit
                    - type
                where: id = ?
                args_mapping: root = [ this.data.zone ]
          result_map: |
            root.data.zone = this.index(0)
            root.data.zone.time_limit = this.index(0).time_limit.ts_sub("0000-01-01T00:00:00.000Z").abs()
    
      - branch:
          request_map: |
            root = {
              "key": this.data.id,
              "value": json().from_all().filter(event -> event.data.id == this.data.id ).sort_by(ev -> ev.timestamp).map_each(ev -> ev.data)
            } 
          processors:
            - cache:
                resource: employee_cache
                operator: set
                key: ${!this.key}
                value: ${!this.value}

########################################## employee_exceeded_time_limit_event ###########################################
  - label: employee_exceeded_time_limit_event
    branch:
      request_map: |
        let cur_time = this.data.time_in_current_zone
        let time_limit = this.data.zone.time_limit
        let employee_level = this.data.level
        let zone_level = this.data.zone.level

        root = if this.data.zone.type == "public" && $cur_time > $time_limit && $employee_level < $zone_level {
          this
        } else{
          deleted()
        }
      processors:
        - label: "test"
          mapping: |
            root.timestamp = this.timestamp
            root.data = {
              "id": this.data.id,
              "duration": (this.data.time_in_current_zone - this.data.zone.time_limit)/1000000000,
              "zone": this.data.zone.id
            }
      result_map: |
        root.type = "employee_exceeded_time_limit_event"
        root.timestamp = this.timestamp
        root.data = this.data
        
########################################## employee_access_denied ###########################################
  - label: employee_access_denied_event
    branch: 
      request_map: |
        let employee_level = this.data.level
        let zone_level = this.data.zone.level

        root = if this.data.zone.type == "private" && $employee_level < $zone_level {
          this
        } else {
          deleted()
        }
      processors:
        - mapping: |
            root.timestamp = this.timestamp
            root.data = {
              "id": this.data.id,
              "level": this.data.level,
              "zone_id": this.data.zone.id,
              "zone_level": this.data.zone.level
            }
              
      result_map: |
        root.type = "employee_access_denied_event"
        root.timestamp = this.timestamp
        root.data = this.data

########################################## employee_changed_zone_event ###########################################
  - label: employee_enrich_next_zone
    branch:
      request_map: |
         if batch_index()+1 < batch_size() && json().from(batch_index()+1).data.zone.id != this.data.zone.id{
            root.current = this
            root.next = json().from(batch_index()+1) 
          } else{
            root = deleted()
          }
      processors: 
        - mapping: |
            root.timestamp = this.next.timestamp
            root.data = {
              "id": this.current.data.id,
              "current_location": this.current.data.location,
              "next_location": this.next.data.location,
              "zone_changed": "%v-%v".format(this.current.data.zone.id,this.next.data.zone.id)
            }
      result_map: |
        root.timestamp = this.timestamp
        root.type = "employee_changed_zone"
        root.data = this.data

  - label: employee_enrich_enter
    branch:
      request_map: |
        if this.data.exists("zone_changed"){
          root.key = this.data.zone_changed 
        } else {
          root = deleted()
        }
      processors:
        - label: "cache"
          cache:
            resource: enter_cache
            operator: get
            key: ${!this.key}
      result_map: |
        root.data.enters = this

  - label: employee_changed_zone_event
    branch:
      request_map: |
        if this.exists("data.enters"){
          root = this
        } else {
          root = deleted()
        }
  ##TODO: Бага. Надо найти ближайшую лежащую точку между двумя другими, а не ближайшую только к первой
      processors:
        - label: "mapping"
          mapping: |
            import "/maps/distation.blobl"
            root.data = this.data
            root.data.enter = this.data.enters.sort_by(enter -> {
                "loc1": enter.data.location,
                "loc2": this.data.current_location
              }.apply("distation_square")).index(0)
            root.data.enters = deleted()

      result_map: |
        root.type = "employee_changed_zone_event"
        root.timestamp = this.data.enter.timestamp
        root.data = this.data
        root.data.enter = this.data.enter.data

########################################## employee_window_entered_event ###########################################

  - label: "employee_window_entered_event"
    branch:
      request_map: |
        if this.type == "employee_changed_zone_event" && this.data.enter.type == "window"{
          root = this
        } else {
          root = deleted()
        }
      processors:
        - mapping: root = this
      result_map: root.type = "employee_window_entered_event"
